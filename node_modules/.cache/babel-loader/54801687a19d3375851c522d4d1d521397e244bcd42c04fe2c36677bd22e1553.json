{"ast":null,"code":"var _jsxFileName = \"/Users/daviddaillere/Documents/Studies/course/Codecademy/projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = props => {\n  _s();\n  const {\n    contacts,\n    addContact\n  } = props;\n\n  /*\r\n  state variables for \r\n  contact info and duplicate check\r\n  */\n  /*\r\n   const [name, setName]= useState('');\r\n   const [email, setEmail]= useState('');\r\n   const [phone, setPhone]= useState('');\r\n   */\n\n  const [contact, setContact] = useState({\n    contact: ''\n  });\n  const [duplicates, setDuplicates] = useState(true);\n\n  //check for duplicates name, everytime the name input change\n  useEffect(() => {\n    if (contact) {\n      setDuplicates(isDuplicates(contact.name));\n    }\n  }, [contact.name]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    if (!duplicates) {\n      addContact(contact.name, contact.phone, contact.email);\n      setContact({\n        name: '',\n        tel: \"\",\n        email: \"\"\n      });\n    }\n  };\n\n  /*\r\n  check for contact name in the \r\n  contacts array variable in props\r\n  */\n  const isDuplicates = newName => {\n    const names = [];\n    contacts === null || contacts === void 0 ? void 0 : contacts.map(contact => {\n      names.push(contact.name);\n    });\n    return names.includes(newName);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        contact: contact,\n        setContact: setContact,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"pKr9aer0E6G+i8bzc3cI7UT6BCg=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","props","_s","contacts","addContact","contact","setContact","duplicates","setDuplicates","isDuplicates","name","handleSubmit","e","preventDefault","phone","email","tel","newName","names","map","push","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","tiles","_c","$RefreshReg$"],"sources":["/Users/daviddaillere/Documents/Studies/course/Codecademy/projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = (props) => {\r\n  const {contacts, addContact} = props;\r\n\r\n   /*\r\n  state variables for \r\n  contact info and duplicate check\r\n  */\r\n /*\r\n  const [name, setName]= useState('');\r\n  const [email, setEmail]= useState('');\r\n  const [phone, setPhone]= useState('');\r\n  */\r\n\r\n  const [contact,setContact]=useState({contact:''})\r\n  const [duplicates, setDuplicates] = useState(true);\r\n\r\n//check for duplicates name, everytime the name input change\r\n useEffect(()=>{\r\n  if(contact){\r\n    setDuplicates(isDuplicates(contact.name));\r\n  }\r\n  },[contact.name]);\r\n\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n   if(!duplicates ){\r\n    addContact(contact.name,contact.phone,contact.email);\r\n    setContact({name:'', tel:\"\", email:\"\"})\r\n   }\r\n  };\r\n\r\n  /*\r\n  check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n  const isDuplicates=(newName)=>{\r\n    const names=[];\r\n     contacts?.map(contact=>{\r\n      names.push(contact.name)\r\n    });\r\n    \r\n    return names.includes((newName));\r\n    \r\n  }\r\n \r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm \r\n        contact={contact}\r\n        setContact={setContact}\r\n        handleSubmit={handleSubmit}\r\n        ></ContactForm>\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList\r\n          tiles={contacts}\r\n        >\r\n\r\n        </TileList>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACrC,MAAM;IAACC,QAAQ;IAAEC;EAAU,CAAC,GAAGH,KAAK;;EAEnC;AACH;AACA;AACA;EACC;AACD;AACA;AACA;AACA;;EAEE,MAAM,CAACI,OAAO,EAACC,UAAU,CAAC,GAACZ,QAAQ,CAAC;IAACW,OAAO,EAAC;EAAE,CAAC,CAAC;EACjD,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACCC,SAAS,CAAC,MAAI;IACb,IAAGU,OAAO,EAAC;MACTG,aAAa,CAACC,YAAY,CAACJ,OAAO,CAACK,IAAI,CAAC,CAAC;IAC3C;EACA,CAAC,EAAC,CAACL,OAAO,CAACK,IAAI,CAAC,CAAC;EAIjB,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB;AACJ;AACA;AACA;IACG,IAAG,CAACN,UAAU,EAAE;MACfH,UAAU,CAACC,OAAO,CAACK,IAAI,EAACL,OAAO,CAACS,KAAK,EAACT,OAAO,CAACU,KAAK,CAAC;MACpDT,UAAU,CAAC;QAACI,IAAI,EAAC,EAAE;QAAEM,GAAG,EAAC,EAAE;QAAED,KAAK,EAAC;MAAE,CAAC,CAAC;IACxC;EACD,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMN,YAAY,GAAEQ,OAAO,IAAG;IAC5B,MAAMC,KAAK,GAAC,EAAE;IACbf,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEgB,GAAG,CAACd,OAAO,IAAE;MACtBa,KAAK,CAACE,IAAI,CAACf,OAAO,CAACK,IAAI,CAAC;IAC1B,CAAC,CAAC;IAEF,OAAOQ,KAAK,CAACG,QAAQ,CAAEJ,OAAO,CAAE;EAElC,CAAC;EAED,oBACElB,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACpB3B,OAAA,CAACH,WAAW;QACZS,OAAO,EAAEA,OAAQ;QACjBC,UAAU,EAAEA,UAAW;QACvBK,YAAY,EAAEA;MAAa;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACZ;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACP,eACV3B,OAAA;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACN3B,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACjB3B,OAAA,CAACF,QAAQ;QACP8B,KAAK,EAAExB;MAAS;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAGP;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACxB,EAAA,CAxEWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}