{"ast":null,"code":"var _jsxFileName = \"/Users/daviddaillere/Documents/Studies/course/Codecademy/projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isDuplicates = newName => {\n  var _contacts;\n  const names = [];\n  (_contacts = contacts) === null || _contacts === void 0 ? void 0 : _contacts.map(contact => names.push(contact.name));\n  return names.includes(newName);\n};\nexport const ContactsPage = props => {\n  _s();\n  const {\n    contacts,\n    addContact\n  } = props;\n\n  /*\r\n  state variables for \r\n  contact info and duplicate check\r\n  */\n  const [contact, setContact] = useState({\n    name: '',\n    phone: '',\n    email: ''\n  });\n  const [duplicates, setDuplicates] = useState(true);\n\n  //check for duplicates name, everytime the name input change\n  useEffect(() => {\n    if (contact) {\n      /*\r\n        check for contact name in the \r\n        contacts array variable in props\r\n        */\n      setDuplicates(isDuplicates(contact.name));\n    }\n  }, [contact.name]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    if (!duplicates) {\n      addContact(contact.name, contact.phone, contact.email);\n      setContact({\n        name: '',\n        phone: \"\",\n        email: \"\"\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        contact: contact,\n        setContact: setContact,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"6lGfH9dHQazpaqmkBD5jTnkor2s=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","isDuplicates","newName","_contacts","names","contacts","map","contact","push","name","includes","ContactsPage","props","_s","addContact","setContact","phone","email","duplicates","setDuplicates","handleSubmit","e","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","tiles","_c","$RefreshReg$"],"sources":["/Users/daviddaillere/Documents/Studies/course/Codecademy/projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nconst isDuplicates=(newName)=>{\r\n  const names=[];\r\n   contacts?.map(contact=>\r\n    names.push(contact.name)\r\n  ); \r\n  return names.includes((newName));   \r\n}\r\n\r\n\r\nexport const ContactsPage = (props) => {\r\n  const {contacts, addContact} = props;\r\n\r\n   /*\r\n  state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [contact,setContact]=useState({name:'', phone:'', email:''})\r\n  const [duplicates, setDuplicates] = useState(true);\r\n\r\n//check for duplicates name, everytime the name input change\r\n useEffect(()=>{\r\n  if(contact){\r\n/*\r\n  check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n    setDuplicates(isDuplicates(contact.name));\r\n  }\r\n  },[contact.name]);\r\n  \r\n\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n   if(!duplicates ){\r\n    addContact(contact.name,contact.phone,contact.email);\r\n    setContact({name:'', phone:\"\", email:\"\"})\r\n   }\r\n  };\r\n\r\n  \r\n \r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm \r\n        contact={contact}\r\n        setContact={setContact}\r\n        handleSubmit={handleSubmit}\r\n        ></ContactForm>\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList\r\n          tiles={contacts}\r\n        >\r\n\r\n        </TileList>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}