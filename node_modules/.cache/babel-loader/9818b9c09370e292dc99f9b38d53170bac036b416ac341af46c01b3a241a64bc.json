{"ast":null,"code":"var _jsxFileName = \"/Users/daviddaillere/Documents/Studies/course/Codecademy/projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = props => {\n  _s();\n  const [Contacts, addContact] = props;\n\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n  const [duplicates, setDuplicates] = useState(true);\n  useEffect(() => {\n    setDuplicates(isDuplicates(name));\n  }, name);\n  const isDuplicates = newName => {\n    const names = Contacts.map(contact => {\n      Contacts.name.push(contact);\n    });\n    return names.includes(newName);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    if (!duplicates) {\n      addContact(name, phone, email);\n      setName('');\n      setPhone();\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"8RJFW7YUp2EVHS4NTTYINBqEO34=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","props","_s","Contacts","addContact","name","setName","email","setEmail","phone","setPhone","duplicates","setDuplicates","isDuplicates","newName","names","map","contact","push","includes","handleSubmit","e","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/daviddaillere/Documents/Studies/course/Codecademy/projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = (props) => {\r\n  const [Contacts, addContact]= props;\r\n\r\n   /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [name, setName]= useState('');\r\n  const [email, setEmail]= useState('');\r\n  const [phone, setPhone]= useState('');\r\n  const [duplicates, setDuplicates] = useState(true);\r\n\r\n  useEffect(()=>{\r\n   setDuplicates(isDuplicates(name));\r\n  },name);\r\n\r\n  const isDuplicates=(newName)=>{\r\n    const names = Contacts.map(contact=>{\r\n      Contacts.name.push(contact)\r\n    });\r\n    \r\n    return names.includes((newName));\r\n  }\r\n\r\n\r\n \r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n   if(!duplicates){\r\n    addContact(name,phone,email);\r\n    setName('');\r\n    setPhone()\r\n   }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n \r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,QAAQ,EAAEC,UAAU,CAAC,GAAEH,KAAK;;EAElC;AACH;AACA;AACA;EACE,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAEZ,QAAQ,CAAC,EAAE,CAAC;EACnC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAEd,QAAQ,CAAC,EAAE,CAAC;EACrC,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAEhB,QAAQ,CAAC,EAAE,CAAC;EACrC,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAElDC,SAAS,CAAC,MAAI;IACbiB,aAAa,CAACC,YAAY,CAACR,IAAI,CAAC,CAAC;EAClC,CAAC,EAACA,IAAI,CAAC;EAEP,MAAMQ,YAAY,GAAEC,OAAO,IAAG;IAC5B,MAAMC,KAAK,GAAGZ,QAAQ,CAACa,GAAG,CAACC,OAAO,IAAE;MAClCd,QAAQ,CAACE,IAAI,CAACa,IAAI,CAACD,OAAO,CAAC;IAC7B,CAAC,CAAC;IAEF,OAAOF,KAAK,CAACI,QAAQ,CAAEL,OAAO,CAAE;EAClC,CAAC;EAKD,MAAMM,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB;AACJ;AACA;AACA;IACG,IAAG,CAACX,UAAU,EAAC;MACdP,UAAU,CAACC,IAAI,EAACI,KAAK,EAACF,KAAK,CAAC;MAC5BD,OAAO,CAAC,EAAE,CAAC;MACXI,QAAQ,EAAE;IACX;EACD,CAAC;;EAED;AACF;AACA;AACA;;EAGE,oBACEX,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,eACExB,OAAA;QAAAwB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACZ,eACV5B,OAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACN5B,OAAA;MAAAwB,QAAA,eACExB,OAAA;QAAAwB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACzB,EAAA,CAzDWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}